//! # tonic-flatbuffers
//! 
//! Generates [`tonic`](https://github.com/hyperium/tonic) code for gRPC services defined in a [flatbuffers](https://github.com/google/flatbuffers) schema.
//! 
//! ## How it works
//! 
//! The builder converts your RPC definitions into the protobuf equivalent, then passes those files to [`tonic-build`](https://github.com/hyperium/tonic) to generate the gRPC client and server code, then modifies the generated files so things compile as expected.
//! 
//! The structs generated by the [flatbuffers compiler](https://github.com/google/flatbuffers) do not own their underlying data, so all RPC services use an owned version of the tables you use in the service definitions. This is accomplished using a modified version of the [`flatbuffers-owned`](https://github.com/florian-g2/flatbuffers-owned) crate, which creates structs with `Owned` as a prefix to your types. So if you define a type:
//! 
//! ```flatbuffers
//! table Request {
//!     foo:uint;
//! }
//! ```
//! 
//! The generated type used by the gRPC endpoints will be `OwnedRequest`.

pub use builder::{Builder, configure};